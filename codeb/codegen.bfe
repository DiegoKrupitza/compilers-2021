%{
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

#include "tree.h"
#include "code_generator.h"
%}

%start stat
%term OP_RETURN=0 OP_ADD=1 OP_MUL=2 OP_AND=3 OP_LESS=4 OP_EQUAL=5 OP_NOT=6 OP_MINUS=7 OP_NUMBER=8 OP_ID=9 OP_PARAM_ID=10 OP_CLASS_VAR_ID=11 OP_THIS=12 OP_NULL=13 OP_ASSIGN=14

%%

stat:   ret                             # 0 #
stat:   assign                          # 0 #

ret:    OP_RETURN(expr)                 # 1 #   writeReturnWithValue(bnode->regStor);

expr:   const                           # 1 #   writeMovev(bnode->value, bnode->regStor);

expr:   OP_ADD(expr, expr)              # 1 #   writeAdd(bnode->kids[1]->regStor, bnode->kids[0]->regStor);
expr:   OP_ADD(const, expr)             # 1 #   writeAddv(bnode->kids[0]->value, bnode->kids[1]->regStor); writeMove(bnode->kids[1]->regStor, bnode->regStor); 
expr:   OP_ADD(expr, const)             # 1 #   writeAddv(bnode->kids[1]->value, bnode->kids[0]->regStor);


expr:   OP_MUL(expr, expr)              # 1 #   writeMul(bnode->kids[1]->regStor, bnode->kids[0]->regStor);
expr:   OP_MUL(const, expr)             # 1 #   writeMulv(bnode->kids[0]->value, bnode->kids[1]->regStor); writeMove(bnode->kids[1]->regStor, bnode->regStor);
expr:   OP_MUL(expr, const)             # 1 #   writeMulv(bnode->kids[1]->value, bnode->kids[0]->regStor);


expr:   OP_AND(expr, expr)              # 1 #   writeAnd(bnode->kids[1]->regStor, bnode->kids[0]->regStor);
expr:   OP_AND(const, expr)             # 1 #   writeAndv(bnode->kids[0]->value, bnode->kids[1]->regStor); writeMove(bnode->kids[1]->regStor, bnode->regStor); 
expr:   OP_AND(expr, const)             # 1 #   writeAndv(bnode->kids[1]->value, bnode->kids[0]->regStor);


expr:   OP_LESS(expr, expr)             # 1 #   writeRegLessReg(bnode->kids[0]->regStor, bnode->kids[1]->regStor, bnode->regStor);
expr:   OP_LESS(expr, const)            # 1 #   writeRegLessV(bnode->kids[0]->regStor, bnode->kids[1]->value, bnode->regStor);
expr:   OP_LESS(const, expr)            # 1 #   writeVLessReg(bnode->kids[0]->value, bnode->kids[1]->regStor, bnode->regStor);
const:  OP_LESS(const, const)           # 0 #   if(bnode->kids[0]->value < bnode->kids[1]->value) { bnode->value = TRUE_VAL; } else { bnode->value = FALSE_VAL; } 

expr:   OP_EQUAL(expr, expr)            # 1 #   writeEquals(bnode->kids[0]->regStor,bnode->kids[1]->regStor,bnode->regStor);
expr:   OP_EQUAL(const, expr)           # 1 #   writeEqualsv(bnode->kids[0]->value,bnode->kids[1]->regStor,bnode->regStor);
expr:   OP_EQUAL(expr, const)           # 1 #   writeEqualsv(bnode->kids[1]->value,bnode->kids[0]->regStor,bnode->regStor);
const:  OP_EQUAL(const, const)          # 0 #   if(bnode->kids[0]->value == bnode->kids[1]->value) { bnode->value = TRUE_VAL; } else { bnode->value = FALSE_VAL; }

expr:   OP_NOT(expr)                    # 1 #   writeNot(bnode->regStor); 
const:  OP_NOT(const)                   # 0 #   bnode->value = ~bnode->kids[0]->value;

expr:   OP_MINUS(expr,const)            # 1 #   writeSubv(bnode->kids[1]->value, bnode->kids[0]->regStor);  
expr:   OP_MINUS(expr,expr)             # 1 #   writeSub(bnode->kids[1]->regStor, bnode->kids[0]->regStor);

expr:   OP_MINUS(const,expr)            # 1 #   writeMovev(bnode->kids[0]->value,bnode->regStor); writeSub(bnode->kids[1]->regStor,bnode->regStor);

expr:   OP_ID                           # 1 #   /* TODO: in later angabe da es sich hier um normale vars handel */
expr:   OP_PARAM_ID                     # 1 #   if (bnode->parameterIndex != -1) writeMove(getParameterRegister(bnode->parameterIndex), bnode->regStor);   
expr:   OP_CLASS_VAR_ID                 # 1 #   if (bnode->classVaroffset != -1) writeMoveForClassVar(bnode->classVaroffset, bnode->regStor);

expr:   OP_THIS                         # 0 #   writeThisMovq(bnode->regStor);
const:  OP_NULL                         # 0 #   bnode->value = 0; /*TODO check if this is what they want */
const:  OP_NUMBER                       # 0 #   /* done */

assign: OP_ASSIGN(OP_ID, const)         # 1 #   writeMoveVInStack(bnode->kids[1]->value, bnode->kids[0]->localVarOffset);
assign: OP_ASSIGN(OP_ID, expr)          # 1 #   writeMoveRegInStack(bnode->kids[1]->regStor, bnode->kids[0]->localVarOffset);
%%